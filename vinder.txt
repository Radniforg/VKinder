Описание алгоритма


#Token VK
#tests
#Декомпозиция
#Запоминает людей при поиске, нет повторной выдачи тех же людей
#Нельзя использовать внешние библиотеки VK, работаем напрямую с API
#Данные пишутся в БД
#Разработать критерии весов совпадений (возраст, пол, группы, расположение, интересы, прочее)
#Получить фотографии из API (по количеству лайков)
#Искать нужно не среди друзей, а среди всех пользователей - нужно посмотреть как устроен API-поиск юзеров


#Мысленная декомпозиция:
#Функция получения топ-3 фотографий - реализовать отдельно, параметр входа - id пользователя
#Функция весового анализа - реализовать отдельно, вхождение - id пользователя.
#Функция "контрольного веса" - разбор id ищущего пользователя на создание весовой модели - организовать через SQL?


#Алгоритм работы:
#Получаем id пользователя и разрешение через токен
#Я думаю, друзей из поиска имеет смысл исключить
#Запрашиваем у пользователя, хочет ли он романтическое знакомство или общение по интересу
#Если ромнатическое знакомство - спрашиваем желательный пол партнера.
#Ставим фильтр по полу, статус текущих отношений добавляет множитель к весам.
#Запрашиваем у пользователя, хочет ли он сам расставить приоритеты по поиску пары
#Если да - делаем короткий опросник по шкале от 1 до 10 для множителя весов
#Разбиваем его страницу на данные, которые потом собираем в таблицу весов
#Если поиск проводится не в первый раз - спрашиваем, хочет ли пользоатель обновить личную базу.
#Если да - проводим поиск, игнорируя изученные id (получить в виде списка из базы) и сортируем с нуля.
#Сортировка идет сначала по "показали пользователю" (0, потом 1), затем по весу (>).
#Если нет - продолжаем ковырять старую бд (index = index+10*число запусков).

#Проводим поиск по пользователям - эту часть нужно разобрать более детально: нет четкого представления, как

#Разчленяем данные пользователей, пишем их в базу данных - а надо ли?
#Вариант выглядит очень сильно давящим на память компа

#Сравниваем данные пользователей с контрольными данными, записываем итоговый вес в данные
#Это все равно нужно делать, но так меньше вещей висит в памяти - должно работаьь эффектино.

#Сортируем полученный список пользователей (можно в пандасе) по весам. index-id-weight
#Отсортированные результаты пишутся в бд. Также в бд пишется, сколько раз пользователь уже использовал приложеньку
#Для каждого пользователя в текущем топе осуществляем функцию поиска фотографий



#надо спросить куратора, зачем нужна бд.
